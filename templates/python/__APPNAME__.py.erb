# -*- coding: utf-8 -*-

DESCRIPTION = """
    Script file <%= @project_name %>

    Author: Alexey Kolyanov, <%= Time.now.year %>

"""

import os
import sys
import yaml
import logging
import argparse

logger = logging.getLogger('log')
logger.setLevel(logging.INFO)
ch = logging.StreamHandler(sys.stdout)
log_format = "%(asctime)-15s\t%(levelname)s\t %(message)s"
ch.setFormatter(logging.Formatter(log_format))
logger.addHandler(ch)
CUR_DIR = os.path.dirname(os.path.abspath(__file__))

parser = argparse.ArgumentParser(description="<%= @project_name %>", epilog=DESCRIPTION)

parser.add_argument('-d', '--debug', action='store_true', help='Enable debug output')
parser.add_argument('-q', '--quiet', action='store_true', help='Quiet mode - outputs only errors')
parser.add_argument('-c', '--config', help='Config file', default='settings.yaml')
parser.add_argument('-i', '--inputfile', help='Input file')
parser.add_argument('-o', '--outputfile', help='Output file')

debugmode = False


def get_config(cfgpath):
    config = {}
    if not os.path.exists(cfgpath):
        if not os.path.exists(os.path.join(CUR_DIR, cfgpath)):
            raise ValueError("Config file %s is not found!" % cfgpath)
        cfgpath = os.path.join(CUR_DIR, cfgpath)
    with open(cfgpath, 'r') as cfgf:
        config = yaml.load(cfgf.read(), Loader=yaml.FullLoader) or {}
    return config


def main():
    global debugmode
    args = parser.parse_args()
    loglevel = logging.INFO
    if args.debug:
        loglevel = logging.DEBUG
        logger.setLevel(loglevel)
        debugmode = True
    if args.quiet:
        loglevel = logging.ERROR
        logger.setLevel(loglevel)
        debugmode = False

    config = get_config(args.config)
    logconfig = config.get('logging', {})
    log_file = logconfig.get('log_file')
    if log_file:
        fh = logging.FileHandler(log_file)
        fh.setLevel(loglevel)
        fh.setFormatter(logging.Formatter(log_format))
        logger.addHandler(fh)

    pass  # TODO

    return 0


if __name__ == "__main__":
    retval = main()
    sys.exit(retval)
