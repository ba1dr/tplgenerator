# -*- coding: utf-8 -*-

"""
    This file contains final aggregated settings for the project.
    Do NOT edit this file manually.
    All changes should be done in files base.py or local.py or /usr/local/etc/{APP_NAME}.yaml

    Settings get overridden in this order:
    base.py -> (development/production).py -> local.py -> /usr/local/etc/{APP_NAME}.yaml -> settings.py
    Most secret and server-specific settings should reside in .yaml file.
    Other files are stored in repository
"""

import sys
import os

import dj_database_url

from ..apps.utils.dynsettings import import_settings
from .django import *
from .local import *

from .logging_settings import get_logging_config

#
# ACTIONS
# DO NOT ADD ANYTHING BELOW THIS LINE
#
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + APPS + LOCAL_APPS
if 'debug_toolbar' in INSTALLED_APPS:
    MIDDLEWARE = ['debug_toolbar.middleware.DebugToolbarMiddleware', ] + MIDDLEWARE

import_settings(settings_file, default_settings_file)  # redefine

for dbname in DATABASES.keys():
    if 'URL' in DATABASES[dbname]:
        dbdesc = dj_database_url.parse(DATABASES[dbname]['URL'])
        DATABASES[dbname].update(dbdesc)

use_console = False
if sys.stdout.isatty():
    use_console = True
LOGGING = get_logging_config(APP_NAME, LOG_FOLDER, apps=APPS + LOCAL_APPS, debug=DEBUG, use_console=use_console)
logging.config.dictConfig(LOGGING)


for dbname in DATABASES.keys():
    if 'URL' in DATABASES[dbname]:
        dbdesc = dj_database_url.parse(DATABASES[dbname]['URL'])
        DATABASES[dbname].update(dbdesc)
    # elif 'HOST' not in DATABASES[dbname]:
    #     # services = find_services_consul('postgres')
    #     dburl = "postgresql://{dbuser}:{dbpass}@{dbhost}:{dbport}/{dbname}"
    #     dburl = dburl.format(dbuser=DATABASES[dbname]['USER'], dbpass=DATABASES[dbname]['PASSWORD'],
    #                          dbhost=services[0]['ServiceAddress'],
    #                          dbport=services[0]['ServicePort'], dbname=DATABASES[dbname]['NAME'])
    #     dbdesc = dj_database_url.parse(dburl)
    #     DATABASES[dbname].update(dbdesc)

# _r, services = c.catalog.service('rabbitmq')
# if not services:
#     raise Exception("rabbitmq is not found, cannot initialize")

# connstr = "amqp://{user}:{password}@{hostname}:{port}//{vhost}"
# connstr = connstr.format(hostname=services[0]['ServiceAddress'],
#                          port=services[0]['ServicePort'],
#                          user=AMQP_USER, password=AMQP_PASSWORD,
#                          vhost=AMQP_VHOST, )
# BROKER_URL = connstr

# if os.environ.get('EEMANUAL'):
#     REDIS_URL = 'redis://localhost/7'
# else:
#     services = find_services_consul('redis')

#     REDIS_URL = 'redis://:@{redishost}:{redisport}/{redisdb}'.format(redishost=services[0]['ServiceAddress'],
#                                                                      redisport=services[0]['ServicePort'],
#                                                                      redisdb=2)

CELERY_RESULT_BACKEND = REDIS_URL
SEMAPHORES_REDIS_URL = REDIS_URL
# logger by default
default_logger = logging.getLogger("main")
